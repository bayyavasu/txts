Spring database connection 
 1. Generate Project: dependencies web,mysq,spring data       jpa
  2. Execute commands : clean , eclipse:eclipse ,package
  3. create database with the name crm
  4. provide db details in application properties :
   
     spring.datasource.url=jdbc:mysql://localhost:3306/crm
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

  5. Creating entity Classes and Re execute mvn package.
 
  6. Crate DAO interface and Re execute mvn package.

  7. Creating Controller class.
---------------------------------------------
MultipartFile
spring.servlet.multipart.max-file-size=1000kb
//spring.servlet.multipart.max-request-size=1000kb
//spring.servlet.multipart.max-file-size=-1
//spring.servlet.multipart.max-request-size=1
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.max-file-size=128MB
spring.servlet.multipart.max-request-size=128MB
spring.servlet.multipart.max-file-size=-1
spring.servlet.multipart.max-request-size=-1
-----------------------------------------------------------
LOGGER..trace("cdcc");
.debud("dcd");
.info("dxwd");
.warn("cfff");
error("sd");
slf4j conversion pattern
------------------------------------------------------------------------
comment username and next line in WebSecurityConfig
autowire userdetailservice(inbuiltclass) 
call userdetailsservice class using  autowired reference and call userdetailsservice method userdetailservice as parameter
create UserDetailsImpl class which implements userdetails
override methods 
create GrantedAuthorityImpl class which implementsGrantedAuthority
override
create @Component userDetailsServiceImpl class which implements UserDetailsService
override loadUserByUsername method
set values to UserDetailsImpl  and  GrantedAuthorityImpl 
====****Remove all the database related dependencies in pom.xml ex:jpa sql connector 
=====>do eclipse:eclipse




GrantedAuthorityImpl implements GrantedAuthority
Userrepo<UserDetailsImpl,Integer>
UserDetailsServiceImpl implements UserDetailsService

-------------------------------------------------------------------------
lambook annotations
@Setter
@Getter
@ToString
@Component 	
@NoArgsConsructor==>default constructor
@AllArgsConstructor
@RequiredArgsConstructor(for final attributes)
@Data==>setter,getter,tostring,hashcode,equals
@EqualsandHashCode
@Test
@Before(it executes everytime when we call the method with Test annotation,whenever we call the Test method first method with before annotation will be executed after control comes to the test method)
@After(itexecutes after the Test annotated method)


